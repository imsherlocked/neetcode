#

class Solution {
    public boolean isValidSudoku(char[][] board) {
        
        Set<Character> row=null;
        Set<Character> col=null;

        for(int i=0;i<9;i++)
        {
            //reinitialize the sets so we don't carry over found characters from the previous run
            row=new HashSet<>();
            col=new HashSet<>();

            for(int j=0;j<9;j++)
            {
                    char r=board[i][j];
                    char c=board[j][i];

                    if(r!='.')
                    {
                        if(row.contains(r))
                    {
                        return false;
                    }
                    else
                        row.add(r);
                    }

                    if(c!='.')
                    {
                        if(col.contains(c))
                    {
                        return false;
                    }
                    else
                        col.add(c);
                    }
            }
        }

        //block
        //loop controls advance by 3 each time to jump through the boxes
        for(int i=0;i<9;i+=3)
        {
            for(int j=0;j<9;j+=3)
            {
                if(!blockCheck(i,j,board))
                    return false;
            }
        }

        return true;
    }

        public boolean blockCheck(int idX,int idY,char [][] board)
        {
            Set<Character> blockSet = new HashSet<>();
            int row=idX+3;
            int col=idY+3;
            //and because i initializes to idX but only goes to rows, we loop 3 times (once for each row)
            for(int i=idX;i<row;i++)
            {
                //and because j initializes to idY but only goes to col, we loop 3 times (once for each row)
                for(int j=idY;j<col;j++)
                {
                    if(board[i][j]!='.')
                    {
                        if(blockSet.contains(board[i][j]))
                        {
                            return false;
                        }
                        else
                        {
                            blockSet.add(board[i][j]);
                        }
                    }
                }
            }
            return true;
        }  
}
