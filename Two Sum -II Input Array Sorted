#

//Approach 1:
class Solution {
    public int[] twoSum(int[] numbers, int target) {
        
        int i=0;
        int j=numbers.length-1;
        
                while(i<j){
                    if((numbers[i]+numbers[j])<target)
                    {
                        i++;
                    }
                    else if((numbers[i]+numbers[j])>target)
                    {
                        j--;
                    }
        else{
            
            return new int[]{i+1,j+1};
        }
                }
                
         return new int[]{-1,-1};

    }
}


Approach 2: Binary Search:

class Solution {
    public int[] twoSum(int[] numbers, int target) {
         for (int i = 0; i < numbers.length; ++i) {
            int low = i + 1;
			int high = numbers.length - 1;
            while (low <= high) {
                int mid = (high - low) / 2 + low;
                if (numbers[mid] +numbers[i] == target)
                    return new int[]{i + 1, mid + 1};
                else if (numbers[mid] + numbers[i] > target) 
                    high = mid - 1;
                else 
                    low = mid + 1;
            }
        }
        return new int[]{-1, -1};
    }
}

        
    
